{"config":{"lang":["pt"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sobre","text":"<p>Reposit\u00f3rio para reunir anota\u00e7\u00f5es de aulas e exerc\u00edcios da primeira fase do Coding Tank do processo seletivo do programa DiverseDEV da Ada Tech em parceria com o Mercado Eletr\u00f4nico.</p> <p>Dura\u00e7\u00e3o: 04/10/2023 - 10/10/2023</p> <p>Professores:</p> <ul> <li>Michael Tadeu Alves de Oliveira</li> <li>Fabio Rodrigues DevOps</li> </ul> <p> Conte\u00fado program\u00e1tico do curso:</p> <ul> <li>L\u00f3gica de Programa\u00e7\u00e3o I C#</li> <li>Vari\u00e1veis</li> <li>Sistemas de tipos</li> <li>Aritm\u00e9tica computacional</li> <li>Fun\u00e7\u00f5es b\u00e1sicas - coer\u00e7\u00e3o de tipos e IO</li> <li>Condicionais</li> <li>La\u00e7os condicionais</li> <li>La\u00e7os num\u00e9ricos</li> <li>Vetores</li> <li>Matrizes</li> </ul>"},{"location":"Anotacoes_de_aulas/Aula01/","title":"Aula 01 - 04/10/2023","text":""},{"location":"Anotacoes_de_aulas/Aula01/#exercicios-e-desafios-da-aula","title":"Exerc\u00edcios e Desafios da aula","text":"<p>https://github.com/AlunosDiverseDEV2023/CodingTank1/tree/main/docs/Exercicios/Aula01</p>"},{"location":"Anotacoes_de_aulas/Aula01/#1-definicoes","title":"1. Defini\u00e7\u00f5es","text":""},{"location":"Anotacoes_de_aulas/Aula01/#11-algoritmo","title":"1.1. Algoritmo","text":"<p>Um algoritmo \u00e9 uma sequ\u00eancia de passos. Exemplo:</p> <pre><code>    Se a nota do aluno for maior ou igual 7\n        Aprovado\n    Se n\u00e3o for\n        Reprovado\n</code></pre> <p>Podemos relatar outros exemplos do dia a dia, como uma receita culin\u00e1ria, ou o passo a passo das primeiras coisas que fazemos ao acordar. Toda sequ\u00eancia de passos pode ser transformada em um algoritmo.</p>"},{"location":"Anotacoes_de_aulas/Aula01/#12-bloco-de-codigo","title":"1.2. Bloco de C\u00f3digo","text":"<p>\u00c9 usado para agrupar nenhum ou mais declara\u00e7\u00f5es. O bloco \u00e9 delimitado por um par de chaves e pode opcionalmente ser nomeado. Exemplo:</p> <pre><code>    {\n        console.log(\"Bloco de c\u00f3digo\");\n    }\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula01/#13-comentarios","title":"1.3. Coment\u00e1rios","text":"<p>\u00c9 usado para voc\u00ea escrever qualquer coisa dentro, documentar um c\u00f3digo</p> <pre><code>    // console.log -&gt; serve para mostrar algo na tela\n\n    console.log(\"Coment\u00e1rios\");\n\n    // console.log(\"Esse c\u00f3digo n\u00e3o ser\u00e1 mais executado\");\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula01/#14-estrutura-de-dados","title":"1.4. Estrutura de dados","text":"<p>Tem como objetivo organizar e administrar dados</p> <pre><code>    Lista de aprovados: (Estrutura de Dados)\n        1 - Fulano\n        1 - Beltrano\n</code></pre> <p>Dentro das estruturas de dados, podemos realizar opera\u00e7\u00f5es como adi\u00e7\u00e3o, remo\u00e7\u00e3o, edi\u00e7\u00e3o, assim como percorrer a estrutura, buscar elementos, ordenar os elementos. H\u00e1 estruturas de dados das mais diversas complexidades e com as mais diversas fun\u00e7\u00f5es.</p>"},{"location":"Anotacoes_de_aulas/Aula01/#15-sentenca-de-codigo","title":"1.5. Senten\u00e7a de C\u00f3digo","text":"<p>Corresponde a um passo do algoritmo ou a uma declara\u00e7\u00e3o. Se o c\u00f3digo fonte descreve um algoritmo, ent\u00e3o senten\u00e7as correspondem a passos do algoritmo. Exemplo:</p> <pre><code>    // Isso \u00e9 uma senten\u00e7a de c\u00f3digo\n    console.log(\"Hello, world!\");\n</code></pre> <p>Dentro das estruturas de dados, podemos realizar opera\u00e7\u00f5es como adi\u00e7\u00e3o, remo\u00e7\u00e3o, edi\u00e7\u00e3o, assim como percorrer a estrutura, buscar elementos, ordenar os elementos. H\u00e1 estruturas de dados das mais diversas complexidades e com as mais diversas fun\u00e7\u00f5es.</p>"},{"location":"Anotacoes_de_aulas/Aula01/#2-o-c-sharp","title":"2. O C sharp","text":""},{"location":"Anotacoes_de_aulas/Aula01/#21-introducao","title":"2.1. Introdu\u00e7\u00e3o","text":"<p>C# \u00e9 uma linguagem de programa\u00e7\u00e3o moderna, orientada a objetos e fortemente tipada (ao declarar uma vari\u00e1vel, voc\u00ea precisa especificar seu tipo de forma expl\u00edcita) desenvolvida pela Microsoft. Ela faz parte da plataforma .NET e \u00e9 amplamente usada para desenvolvimento de aplicativos Windows, aplicativos da web, jogos e muito mais.</p> <p>Surgiu como uma linguagem pra competir com Java. O C# roda dentro de um framework, o .NET, e muitas aplica\u00e7\u00f5es rodam dentro do MVC do ASP.NET.</p> <p>Diversos produtos de Cloud, como GCT, Azure ou AWS possuem suporte para o C#.</p>"},{"location":"Anotacoes_de_aulas/Aula01/#22-tipos-de-dados","title":"2.2. Tipos de dados","text":"<p>C# \u00e9 uma linguagem fortemente tipada. Isso significa que devemos declarar o tipo de uma vari\u00e1vel que indica o valor que ela armazenar\u00e1, como um n\u00famero int, um float ou decimal, string etc.</p> <pre><code>    - Tipos num\u00e9ricos integrais (int, long, short, byte);\n    - Tipos num\u00e9ricos de ponto flutuante (float, double, decimal);\n    - Tipos de caracteres (char);\n    - Tipos booleanos (bool);\n    - Tipos de texto (string);\n    - Tipos de data e hora (DateTime, TimeSpan);\n    - Tipos de enumera\u00e7\u00e3o (enum);\n    - Tipos de array (array);\n    - Tipos de refer\u00eancia (object, dynamic);\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula01/#23-variaveis","title":"2.3. Vari\u00e1veis","text":"<p>Em C#, </p>"},{"location":"Anotacoes_de_aulas/Aula01/#codigo","title":"C\u00f3digo","text":"<pre><code>    namespace Aula1\n    {\n        class Program\n        {\n            static void Main(string[] args)\n            {\n                string nome = args[0];\n                Console.WriteLine(\"Hello, World!\");\n            }\n        }\n    }\n</code></pre> <ul> <li> <p>namespace: utilizado para agrupar arquivos dentro de um mesmo \"pacote\"</p> </li> <li> <p>string[] args: par\u00e2metros utilizados na linha de comando, que s\u00e3o passados para o programa quando rodamos o arquivo execut\u00e1vel. No exemplo, a string nome receberia a string armazenada em args[0];</p> </li> </ul>"},{"location":"Anotacoes_de_aulas/Aula02/","title":"Aula 02 - 05/10/2023","text":""},{"location":"Anotacoes_de_aulas/Aula02/#exercicios-e-desafios-da-aula","title":"Exerc\u00edcios e Desafios da aula","text":"<p>https://github.com/AlunosDiverseDEV2023/CodingTank1/tree/main/docs/Exercicios/Aula02</p>"},{"location":"Anotacoes_de_aulas/Aula02/#1-strings","title":"1. Strings","text":""},{"location":"Anotacoes_de_aulas/Aula02/#11-declaracao","title":"1.1. Declara\u00e7\u00e3o","text":"<pre><code>    string minhaString;\n    minhaString = \"Isso \u00e9 uma string\";\n\n    string minhaOutraString;\n    minhaOutraString = \"e essa aqui tamb\u00e9m \u00e9!\";\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula02/#12-concatenacao-e-interpolacao","title":"1.2. Concatena\u00e7\u00e3o e Interpola\u00e7\u00e3o","text":"<pre><code>    // concatena\u00e7\u00e3o\n    string stringConcatenada = minhaString + \" \" + minhaOutraString;\n\n    // interpola\u00e7\u00e3o\n    string maisUmaStringConcatenada = ${minhaString} {minhaOutraString};\n\n    // interpola\u00e7\u00e3o\n    string outraStringConcatenada = string.Format(\"{0} {1}\", minhaString, minhaOutraString);\n\n    // concatena\u00e7\u00e3o\n    string maisOutraStringConcatenada = string.Concat(minhaString, \" \", minhaOutraString);\n\n    StringBuilder builder = new StringBuilder();\n    for (int i = 0; i &lt; 10; i++)\n    {\n        builder.Append($\"Item {i}, \");\n    }\n    string soMaisUmaStringConcatenada = builder.ToString();\n\n    StringBuilder outroBuilder = new StringBuilder();\n    outroBuilder.Append(\"Hello, \");\n    outroBuilder.Append(\"world!\");\n    Console.WriteLine(outroBuilder.ToString());\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula02/#13-outras-funcoes-de-strings","title":"1.3. Outras fun\u00e7\u00f5es de Strings","text":"<pre><code>    string stringSubstituida = minhaString.Replace(\"string\", \"barata\");\n</code></pre> <pre><code>    Console.Write(\"Insira o seu ultimo nome, idade e altura (mesma linha): \");\n    string[] vet = Console.ReadLine().Split(' ');\n\n    string ultNome = vet[0];\n    int idade = int.Parse(vet[1]);\n    double altura = double.Parse(vet[2]);\n\n    Console.WriteLine(ultNome);\n    Console.WriteLine(idade);\n    Console.WriteLine(altura.ToString(\"F2\"));\n</code></pre> <pre><code>    string exemplo = \"Exemplo de Texto\";\n    string exemploEspacos = \"    Exemplo sem espa\u00e7o    \";\n\n    // copia para a string cortada os primeiros 7 caracteres da string exemplo -&gt; cortada = \"Exemplo\"\n    string cortada = exemplo.Substring(0, 7);\n\n    // capitaliza todos os caracteres da string exemplo -&gt; maiuscula == \"EXEMPLO DE TEXTO\"\n    string maiuscula = exemplo.ToUpper();\n\n    // todos os caracteres da string exemplo ser\u00e3o min\u00fasculos -&gt; minuscula == \"exemplo de texto\"\n    string minuscula = exemplo.ToUpper();\n\n    // remove espa\u00e7os ao final e no iniciao da string -&gt; semEspacosDemais == \"Exemplo sem espa\u00e7o\"\n    string semEspacosDemais = exemploEspacos.Trim();\n\n    // remove todos os espa\u00e7os -&gt; semEspacoNenhum == \"Exemplosemespa\u00e7o\"\n    string semEspacoNenhum = exemploEspacos.Replace(\" \", \"\");\n\n    // coloca na vari\u00e1vel comprimento o tamanho da string exemplo -&gt; comprimento == 16\n    int comprimento = exemplo.Length();\n\n    // remove os espa\u00e7os e j\u00e1 d\u00e1 o comprimento -&gt; numeroCaracteres == 14\n    int numeroCaracteres = exemplo.Replace(\" \", \"\").Length();\n\n    // guarda a entrada do usu\u00e1rio j\u00e1 formatando para min\u00fasculas -&gt; nomeMinusculo = \"charles serafim\"\n    Console.WriteLine(\"Digite o seu nome: \");\n    string nomeMinusculo = Console.ReadLine().ToLower(); // usu\u00e1rio digita \"Charles Serafim\"\n\n    // CultureInfo formata de acordo com o pa\u00eds passado -&gt; numeroFormatado == \"123.456,780\"\n    double numero = 123456.78;\n    CultureInfo CI = CultureInfo.GetCultureInfo(\"pt-BR\");\n    string numeroFormatado = numero.ToString(\"N\", CI);\n\n    // transforma somente a primeira letra em mai\u00fascula utilizando as fun\u00e7\u00f5es ToUpper e Substring, juntamente com concatena\u00e7\u00e3o de strings e char -&gt; saida == \"Exemplo de texto\"\n    string exemploPrimeiraMaiuscula = \"exemplo de texto\";\n    Console.WriteLine(char.ToUpper(texto2[0]) + texto2.Substring(1));\n\n    // regex: verifica se algo corresponde a um padr\u00e3o\n    Console.WriteLine(\"Digite sim ou n\u00e3o\");\n    string input = Console.ReadLine();\n    string pattern = @\"^N\u00e3o\";\n    bool isMatch = Regex.IsMatch(input, pattern);\n    if(isMatch)\n    {\n        Console.WriteLine(\"A string corresponde ao padr\u00e3o.\");\n    }\n    else\n    {\n        Console.WriteLine(\"A string n\u00e3o corresponde ao padr\u00e3o.\");\n    }\n\n    // outros exemplos de regex -&gt; telefone: (31 9 2345-2356)\n    string phonePattern = @\"\\(\\d{2}\\) \\d{5}-\\d{4}\";\n    string phonePattern2 = @\"\\(\\d{2}\\) \\d{4,5}-\\d{4}\";\n    string phonePatternWith9 = @\"\\(\\d{2}\\) 9\\d{4}-\\d{4}\";\n\n    // verificar um reger com mais de um padr\u00e3o: Regex.Matches\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula02/#14-conversao-de-tipos","title":"1.4. Convers\u00e3o de Tipos","text":"<pre><code>    // convers\u00e3o impl\u00edcita\n    int numInteiro = 42;\n    double numDecimal = inteiro;\n\n    // convers\u00e3o expl\u00edcita\n    double numDecimal2 = 42.5;\n    int numInteiro2 = (int)numDecimal2;\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula02/#15-estruturas-condicionais","title":"1.5. Estruturas Condicionais","text":"<p>Em C#, assim como em muitas outras linguagens de programa\u00e7\u00e3o, a estrutura condicional permite que voc\u00ea tome decis\u00f5es no seu c\u00f3digo com base em condi\u00e7\u00f5es espec\u00edficas. A estrutura condicional mais comum \u00e9 o if, mas tamb\u00e9m existem varia\u00e7\u00f5es como else, else if e switch.</p>"},{"location":"Anotacoes_de_aulas/Aula02/#if-else","title":"IF ELSE","text":"<p>No exemplo abaixo, o que est\u00e1 dentro do bloco de c\u00f3digo entre chaves \"{}\" vai ser executado apenas se a condi\u00e7\u00e3o expressa entre par\u00eanteses ap\u00f3s o if seja verdadeira, ou seja, se o valor armazenado na vari\u00e1vel idade for maior ou igual a 18.</p> <p><pre><code>    int idade = 18;\n    if(idade &gt;= 18)\n    {\n        Console.WriteLine(\"Voc\u00ea \u00e9 maior de idade.\");\n    }\n</code></pre> </p> <p>No exemplo abaixo, a palavra reservada \"else\" significa \"se n\u00e3o\", ou seja, se n\u00e3o for satisfeita a condi\u00e7\u00e3o expressa pelo primeiro if, ser\u00e1 analisada a condi\u00e7\u00e3o do segundo if, e assim por diante. Ao final temos um else sozinho que abrange as possibilidades restantes, que ser\u00e1 avaliado caso nenhuma das condi\u00e7\u00f5es anteriores tenha sido satisfeita. Em outras palavras, o uso do else neste caso faz com que as condi\u00e7\u00f5es sejam analisadas sequencialmente e faz com que a an\u00e1lise pare quando alguma condi\u00e7\u00e3o for satisfeita.</p> <p><pre><code>    int nota = 85;\n    if(nota &gt;= 90)\n    {\n        Console.WriteLine(\"Sua nota \u00e9 A.\");\n    }\n    else if(nota &gt;= 80)\n    {\n        Console.WriteLine(\"Sua nota \u00e9 B.\");\n    }\n    else if(nota &gt;= 70)\n    {\n        Console.WriteLine(\"Sua nota \u00e9 C.\");\n    }\n    else\n    {\n        Console.WriteLine(\"Sua nota \u00e9 D.\");\n    }\n\n    // Sa\u00edda:\n        Sua nota \u00e9 B.\n</code></pre> </p> <p>J\u00e1 neste exemplo, temos apenas o uso do if. Neste caso, as condi\u00e7\u00f5es expressas em todos os ifs ser\u00e3o analisadas.</p> <p><pre><code>    int nota = 85;\n    if(nota &gt;= 90)\n    {\n        Console.WriteLine(\"Sua nota \u00e9 A.\");\n    }\n    if(nota &gt;= 80)\n    {\n        Console.WriteLine(\"Sua nota \u00e9 B.\");\n    }\n    if(nota &gt;= 70)\n    {\n        Console.WriteLine(\"Sua nota \u00e9 C.\");\n    }\n\n    // Sa\u00edda:\n        Sua nota \u00e9 B.\n        Sua nota \u00e9 C.\n</code></pre> </p>"},{"location":"Anotacoes_de_aulas/Aula02/#switch-case","title":"SWITCH CASE","text":"<p>Esta fun\u00e7\u00e3o faz a compara\u00e7\u00e3o de um argumento passado para ela com op\u00e7\u00f5es pr\u00e9-estabelecidas e executa as fun\u00e7\u00f5es contidas dentro do bloco case. A palavra break faz com que ap\u00f3s a realiza\u00e7\u00e3o das opera\u00e7\u00f5es do case, a execu\u00e7\u00e3o do programa saia de dentro do switch e continue na linha ap\u00f3s seu bloco de c\u00f3digo.</p> <pre><code>    char operador = '+';\n    double num1 = 18, num2 = 5, resultado = 0;\n\n    switch(operador)\n    {\n        case '+':\n            resultado = num1 + num2;\n            break;\n\n\n        case '-':\n            resultado = num1 - num2;\n            break;\n\n\n        case '*':\n            resultado = num1 * num2;\n            break;\n\n\n        case '/':\n            resultado = num1 / num2;\n            break;\n\n        default:\n            Console.WriteLine(\"Operador inv\u00e1lido\");\n            break;\n    }\n\n    Console.WriteLine(\"Resultado: \" + resultado);\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula02/#operador-ternario","title":"OPERADOR TERN\u00c1RIO","text":"<p>Este operador faz a avalia\u00e7\u00e3o da express\u00e3o que vem antes do ponto de interroga\u00e7\u00e3o (?). Caso a condi\u00e7\u00e3o seja verdadeira, ser\u00e1 executado o que estiver do lado esquerdo dos dois pontos (:). Caso seja falsa, ser\u00e1 executado o que est\u00e1 \u00e0 direita.</p> <pre><code>    int numero = 10;\n    string resultado = (nnumero % 2 == 0) ? \"Par\" : \"Impar\";\n    string resultado2 = (numero &gt; 0) ? \"Maior que zero\" : ((numero &lt; 0) ? \"Menor que zero\" : \"Zero\")\n</code></pre> <p>Considera\u00e7\u00f5es: ponderar sobre a utiliza\u00e7\u00e3o exaustiva desses recursos. Refletir sobre a legibilidade do seu c\u00f3digo, pois na vida profissional muitas vezes \u00e9 importante que outras pessoas ou colegas de trabalho consigam compreender facilmente o c\u00f3digo feito. Equilibrar a otimiza\u00e7\u00e3o do c\u00f3digo com a legibilidade.</p>"},{"location":"Anotacoes_de_aulas/Aula03/","title":"Aula 03 - 06/10/2023","text":""},{"location":"Anotacoes_de_aulas/Aula03/#exercicios-e-desafios-da-aula","title":"Exerc\u00edcios e Desafios da aula","text":"<p>https://github.com/AlunosDiverseDEV2023/CodingTank1/tree/main/docs/Exercicios/Aula03</p>"},{"location":"Anotacoes_de_aulas/Aula03/#comentarios-gerais-sobre-os-exercicios","title":"Coment\u00e1rios gerais sobre os exerc\u00edcios","text":""},{"location":"Anotacoes_de_aulas/Aula03/#tratamento-de-excecao-com-tryparse","title":"Tratamento de exce\u00e7\u00e3o com TryParse()","text":"<pre><code>    if(double.TryParse(Console.ReadLine(), out double pesoPeixe) == false)\n    {\n        Console.WriteLine(\"N\u00e3o deu certo!\");\n        continue;\n    }\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula03/#identificacao-de-palindromos","title":"Identifica\u00e7\u00e3o de pal\u00edndromos","text":"<pre><code>    static void Main(string[] args)\n    {\n        string texto = \"aqui \u00e9 uma string\";\n        int tamanho = texto.Length;\n        bool ehPalindromo = true;\n\n        for(int i = 0; i &lt; tamanho / 2; i++)\n        {\n            string letraComeco = texto[i].ToString();\n            Console.WriteLine(letra);\n\n            string letraFim = texto[tamanho - 1 - i].ToString();\n            Console.WriteLine(letra);\n\n            if(letraComeco != letraFim) ehPalindromo = false;\n        }\n\n        Console.WriteLine(ehPalindromo ? \"\u00c9 um pal\u00edndromo\" : \"N\u00e3o \u00e9 um pal\u00edndromo\");\n    }\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula03/#1-estruturas-de-dados","title":"1. Estruturas de Dados","text":""},{"location":"Anotacoes_de_aulas/Aula03/#11-vetor-ou-array","title":"1.1. Vetor ou Array","text":"<p>Um vetor, em ingl\u00eas \"array\", \u00e9 um agrupamento de vari\u00e1veis do mesmo tipo. Esse agrupamento possui um valor fixo de quantas posi\u00e7\u00f5es podemos armazenar.</p> <pre><code>    static void Main(string[] args)\n    {\n        // vetor =&gt; cole\u00e7\u00e3o de algo\n\n        // os valores inteiros n\u00e3o preenchidos ficam com valor 0\n\n        // vetor de tamanho 5\n        int[] vetorInteiro = new int[5];\n\n        // vetor sempre come\u00e7a do \u00edndice 0 e termina no tamanho - 1\n        vetorInteiro[0] = 1;\n        vetorInteiro[1] = 2200;\n        vetorInteiro[2] = 30;\n        vetorInteiro[3] = 130;\n        vetorInteiro[4] = 1130;\n\n        int tamanhoAtual = vetorInteiro.Length;\n\n        // aumentar tamanho do array\n        Array.Resize(ref vetorInteiro, tamanhoAtual + 5);\n        vetorInteiro[6] = 1131;\n\n        // outra forma de inicializa\u00e7\u00e3o\n        int[] vetorInteiro = new int[5] { 1, 2, 3, 4, 5 };\n\n        // percorrer o vetor utilizando for\n        for(int i = 0; i &lt; vetorInteiro.Length; i++)\n        {\n            Console.WriteLine($\"indice: {i}; valor: {vetorInteiro[i]}\");\n        }\n\n        // percorrer o vetor utilizando for\n        for(int i = 0; i &lt; vetorInteiro.Length; i++)\n        {\n            Console.WriteLine($\"indice: {i}; valor: {vetorInteiro[i]}\");\n        }\n\n        // percorrer o vetor utilizando foreach\n        // executa um bloco de c\u00f3digo para cada item dentro do vetor\n        // n\u00e3o \u00e9 necessario colocar contador nem indice\n        foreach(var item in vetorInteiro)\n        {\n            int valorDoArray = item;\n            Console.WriteLine(valorDoArray);\n        }\n\n        // percorrer o vetor utilizando while\n        // enquanto a condi\u00e7\u00e3o expressa for verdadeira, executa o bloco de c\u00f3digo\n        int contador = 0;\n        while(contador &lt; vetorInteiro.Length)\n        {\n            Console.WriteLine($\"indice: {contador}; valor: {vetorInteiro[contador]}\");\n            contador++;\n        }\n\n\n        // while: continue e break\n        bool condicao = true\n        while(condicao)\n        {\n            Console.WriteLine(\"Informe seu time\");\n            string time = Console.ReadLine();\n\n            if(time == \"juventus\")\n            {\n                bool condicao = false;\n                // o continue interrompe a execu\u00e7\u00e3o atual do bloco de c\u00f3digo, por\u00e9m continua a partir da pr\u00f3xima itera\u00e7\u00e3o do loop\n                continue;\n            }\n\n            if(time == \"ponte preta\")\n            {\n                // o break interrompe a execu\u00e7\u00e3o atual do bloco de c\u00f3digo e encerra a execu\u00e7\u00e3o do loop\n                break;\n            }\n\n            Console.WriteLine($\"Seu time \u00e9 {time}\");\n        }\n\n    }\n\n    // stack: aloca\u00e7\u00e3o est\u00e1tica. guardo um conjunto de mem\u00f3ria no qual vou alocando  vari\u00e1veis\n    // stack overflow\n    // heap: aloca\u00e7\u00e3o din\u00e2mica\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula03/#12-matriz","title":"1.2. Matriz","text":"<pre><code>    static void Main(string[] args)\n    {\n        // matriz: vetor de 2 dimens\u00f5es\n        int[,] matriz = new int[2, 3];\n        matriz[0, 0] = 1;\n        matriz[0, 1] = 2;\n        matriz[0, 2] = 4\n\n        int[,] matriz2 = new int[2, 3]\n        {\n            {1, 2, 3},\n            {4, 5, 6}\n        };\n\n        for(int i = 0; i &lt; 2; i++)\n        {\n            for(int j = 0; j &lt; 3; j++)\n            {\n                Console.WriteLine($\"linha: {i}, coluna: {j}, valor: {matriz[i, j]}\");\n            }\n        }\n    }\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula03/#13-dicionario","title":"1.3. Dicion\u00e1rio","text":"<p>O dicion\u00e1rio \u00e9 uma matriz de duas dimens\u00f5es com chave e valor de tipos diferentes <pre><code>    static void Main(string[] args)\n    {\n        // exemplo de aplica\u00e7\u00e3o: banco de dados, JSON\n        // mant\u00e9m em mem\u00f3ria sem a necessidade de ficar fazendo muitas requisi\u00e7\u00f5es ao banco de dados\n        // \u00e9 bom para dados tempor\u00e1rios\n\n        // warning: verificar exemplos\n        Dictionary&lt;string, double&gt; dic = new Dictionary&lt;string, double&gt;\n        {\n            { \"chave1\", 2 },\n            { \"chave2\", 5.0 },\n            { \"chave3\", 3.0 }\n        };\n\n        Console.WriteLine(dic[\"chave1\"]);\n\n        // h\u00e1 tipos an\u00e1logos, como a Tupla&lt;&gt;, a List&lt;&gt;\n\n        // curiosidade: \u00e9 parecido com JSON\n\n        foreach(var item in dic)\n        {\n            // \u00e9 poss\u00edvel fazer alguns tipos de busca dentro do dicion\u00e1rio\n            Console.WriteLite($\"chave: {item.Key}, valor: {item.Value}\");\n        }\n\n        List&lt;string&gt; keys = new List&lt;string&gt;(dic.Keys);\n        for(int i = 0; i &lt; keys.Count; i++)\n        {\n            var key = keys[i];\n            var valor = dic[key];\n        }\n    }\n</code></pre></p> <p>Obs.: Uma string \u00e9 um array de char!</p> <p>Pesquisar: - Stack e Heap no armazenando de mem\u00f3ria - Opera\u00e7\u00f5es com vetores - Biblioteca Linq - Enum - Do while</p>"},{"location":"Anotacoes_de_aulas/Aula04/","title":"Aula 04 - 09/10/2023","text":""},{"location":"Anotacoes_de_aulas/Aula04/#exercicios-e-desafios-da-aula","title":"Exerc\u00edcios e Desafios da aula","text":"<p>https://github.com/AlunosDiverseDEV2023/CodingTank1/tree/main/docs/Exercicios/Aula04</p> <pre><code>    Console.WriteLine($\"Valor da gorjeta: R$ {valorGorjeta.ToString(\"0.00\")} \" +\n    $\"\\r\\nValor total a pagar: R$ {(valorConta + valorGorjeta).ToString(\"0.00\")} \\n\");\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula04/#continuacao-estruturas-de-repeticao","title":"Continua\u00e7\u00e3o: Estruturas de Repeti\u00e7\u00e3o","text":""},{"location":"Anotacoes_de_aulas/Aula04/#while","title":"While","text":"<pre><code>    int contador = 0;\n    while (contador &lt; 5)\n    {\n        // C\u00f3digo a ser repetido\n        contador++;\n    }\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula04/#do-while","title":"Do... While","text":"<pre><code>    int contador = 0;\n    do\n    {\n        // C\u00f3digo a ser repetido\n        contador++;\n    }\n    while (contador &lt; 5);\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula04/#tratamento-de-erros","title":"Tratamento de Erros","text":"<p>O tratamento de erros em C# \u00e9 uma t\u00e9cnica essencial para lidar com exce\u00e7\u00f5es que podem ocorrer durante a execu\u00e7\u00e3o de um programa. Exce\u00e7\u00f5es s\u00e3o eventos n\u00e3o planejados que ocorrem durante a execu\u00e7\u00e3o do c\u00f3digo e podem interromper a execu\u00e7\u00e3o normal do programa se n\u00e3o forem tratadas adequadamente. O tratamento de erros permite que voc\u00ea lide com exce\u00e7\u00f5es de maneira controlada, evitando a quebra do programa.</p> <p>Padr\u00e3o chamado Polly -&gt; repete as tentativas ap\u00f3s um determinado per\u00edodo de tempo; Tamb\u00e9m pode ser utilizado fila. Ver: https://github.com/App-vNext/Polly.</p>"},{"location":"Anotacoes_de_aulas/Aula04/#try","title":"Try","text":"<p>Adequado de utilizar em trechos de c\u00f3digo onde exce\u00e7\u00f5es podem ser geradas. Exemplo: entradas de dados pelos usu\u00e1rios.</p> <pre><code>    try // \u00e9 onde as exce\u00e7\u00f5es v\u00e3o ser geradas\n    {\n        int x = 10;\n        int y = 0;\n        int resultado = x  y;\n        Console.WriteLine(resultado);\n    }\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula04/#catch","title":"Catch","text":"<pre><code>    try // \u00e9 onde as exce\u00e7\u00f5es v\u00e3o ser geradas\n    {\n        int x = 10;\n        int y = 0;\n        int resultado = x  y;\n        Console.WriteLine(resultado);\n    }\n    catch (DivideByZeroException ex) // \u00e9 onde as exce\u00e7\u00f5es ser\u00e3o tratadas\n    {\n        Console.WriteLine(\"Erro: Tentativa de divis\u00e3o po zero.\");\n    }\n</code></pre> <p>Try-Catch Cala-boca: Um try catch que captura uma exce\u00e7\u00e3o por\u00e9m n\u00e3o toma uma atitude em rela\u00e7\u00e3o a ela, n\u00e3o faz nada com essa informa\u00e7\u00e3o e muito menos trata a exce\u00e7\u00e3o.</p>"},{"location":"Anotacoes_de_aulas/Aula04/#finally","title":"Finally","text":"<pre><code>    FileStream arquivo = null\n    try // \u00e9 onde as exce\u00e7\u00f5es v\u00e3o ser geradas\n    {\n        arquivo = new FileStream(\"arquivo.txt\", FileMode.Open);\n    }\n    catch (IOException ex) // \u00e9 onde as exce\u00e7\u00f5es ser\u00e3o tratadas\n    {\n        Console.WriteLine(\"Erro de ES: \" + ex.Message);\n    }\n    finally // opcional -&gt; vai definir atitudes a serem tomadas com a exce\u00e7\u00e3o\n    {\n        if(arquivo != null)\n        {\n            arquivo.Close();\n        }\n    }\n</code></pre>"},{"location":"Anotacoes_de_aulas/Aula04/#catchs-personalizadas","title":"Catchs personalizadas","text":"<pre><code>    catch (DivideByZeroException ex)\n    {\n\n    }\n    catch (MinhaNovaExcecao ex)\n    {\n\n    }\n</code></pre>"},{"location":"Tutoriais/VSCode/","title":"Instalar o SDK do .NET no Ubuntu","text":"<p>Links \u00fateis: https://learn.microsoft.com/pt-br/dotnet/core/install/linux-ubuntu </p>"},{"location":"Tutoriais/VSCode/#passo-a-passo","title":"Passo a passo","text":""},{"location":"Tutoriais/VSCode/#passo-0-verificar-se-o-sdk-ja-esta-instalado","title":"Passo 0: Verificar se o SDK j\u00e1 est\u00e1 instalado","text":"<p>Rodar os seguintes comandos no terminal:</p> <pre><code>    1   dotnet --list-sdks\n    2   dotnet --list-runtimes\n</code></pre>"},{"location":"Tutoriais/VSCode/#passo-1-instalar-o-sdk","title":"Passo 1: Instalar o SDK","text":"<pre><code>    1   sudo apt-get update\n    2   sudo apt-get install -y dotnet-sdk-7.0\n</code></pre>"},{"location":"Tutoriais/VSCode/#passo-2-instalar-dependencias","title":"Passo 2: Instalar depend\u00eancias","text":"<pre><code>    sudo apt install libc6\n    sudo apt install libgcc1\n    sudo apt install libgcc-s1\n    sudo apt install libgssapi-krb5-2\n    sudo apt install libicu70\n    sudo apt install liblttng-ust1\n    sudo apt install libssl3\n    sudo apt install libstdc++6\n    sudo apt install libunwind8\n    sudo apt install zlib1g\n</code></pre>"},{"location":"Tutoriais/VSCode/#passo-3-instalar-vs-code","title":"Passo 3: Instalar VS Code","text":"<p>Instru\u00e7\u00f5es: https://code.visualstudio.com/docs/setup/linux</p> <p>Primeiramente, baixar o arquivo adequado \u00e0 distribui\u00e7\u00e3o. No ubuntu, \u00e9 a .deb, em https://code.visualstudio.com/download.</p>"},{"location":"Tutoriais/VSCode/#passo-4-instalar-extensoes-no-vs-code","title":"Passo 4: Instalar extens\u00f5es no VS Code","text":"<p>Acessar o menu Extensions ou Extens\u00f5es do VSCode</p> <p>Pesquisar \"C#\"</p> <p>Instalar as duas primeiras extens\u00f5es listadas</p>"},{"location":"Tutoriais/VSCode/#passo-5-testando","title":"Passo 5: Testando","text":"<p>Link: https://learn.microsoft.com/pt-br/dotnet/core/tutorials/with-visual-studio-code?pivots=dotnet-7-0</p> <pre><code>    1.  Criar uma pasta nomeada \"HelloWorld\" e abrir o VSCode dentro dela\n    2.  Abrir o terminal dentro do VSCode selecionando Terminal &gt; New Terminal ou Exibir &gt; Terminal\n    3.  Digitar no terminal \"dotnet new console --framework net7.0\"\n    4.  Executar com o comando \"dotnet run\"\n</code></pre> <p>Ap\u00f3s seguir estes passos, deve ser impressa na tela do terminal a mensagem \"Hello, World!\". Caso isso aconte\u00e7a, o sdk foi instalado corretamente. Pode-se utilizar os comandos do Passo 0 para verificar as vers\u00f5es do sdk e/ou runtime instaladas.</p>"}]}